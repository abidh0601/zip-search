{"version":3,"sources":["components/CityRow.js","components/ZipSearch.js","components/List.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["CityRow","State","this","props","city","Lat","Long","Pop","EstimatedPopulation","Wages","TotalWages","City","class","Component","ZipSearch","zipcode","List","rows","searchzip","data","map","index","push","key","id","search","Result","found","appdata","App","state","inputtext","handleSearch","bind","handleInput","switchSearch","url","toUpperCase","axios","get","result","setState","console","log","event","target","value","onClick","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97336ecb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport '../css/CityRow.css'\r\n\r\nclass CityRow extends Component{\r\n    render(){\r\n        const State = this.props.city.State;\r\n        const Lat= this.props.city.Lat;\r\n        const Long = this.props.city.Long;\r\n        const Pop = this.props.city.EstimatedPopulation;\r\n        const Wages = this.props.city.TotalWages; \r\n        const City = this.props.city.City;\r\n        return(\r\n            <table>\r\n                <div class=\"head\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td>\r\n                                {City}, {State} \r\n                            </td>\r\n                        </tr>\r\n                    </thead>\r\n                </div>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <ul>\r\n                                <li>\r\n                                    State: {State}\r\n                                </li>\r\n                                <li>\r\n                                    Location: ({Lat}, {Long})\r\n                                </li>\r\n                                <li>\r\n                                    Population (estimated): {Pop}\r\n                                </li>\r\n                                <li>\r\n                                    Total Wages: {Wages}\r\n                                </li>\r\n                            </ul>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CityRow;","import React, {Component} from 'react';\r\n\r\nclass ZipSearch extends Component{\r\n    render(){\r\n        const zipcode = this.props.zipcode;\r\n        return(\r\n            <ul>\r\n                <li>\r\n                {zipcode}\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ZipSearch;","import React, {Component} from 'react'; \r\n\r\nimport CityRow from './CityRow.js';\r\nimport ZipSearch from './ZipSearch.js';\r\n\r\nimport '../css/List.css'\r\n\r\nclass List extends Component{\r\n    \r\n    render(){\r\n        const rows = [];\r\n        if(this.props.searchzip){\r\n            \r\n            this.props.data.map((city, index) => {\r\n            rows.push(\r\n                <CityRow class=\"EachCity\" key={index} city={city}/>\r\n            )\r\n        });\r\n        }\r\n        else{\r\n            this.props.data.map((zipcode, index) =>\r\n            {\r\n                \r\n                rows.push(\r\n                    <ZipSearch key={index} zipcode={zipcode}/>\r\n                )\r\n            }\r\n            )\r\n        }\r\n        \r\n        return(\r\n            \r\n            <div id=\"CityList\">\r\n                <h2>All {this.props.searchzip ? \"Cities\" : \"Zipcodes\"} Associated With {this.props.search} </h2>\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default List;","import React, {Component} from 'react';\r\n\r\nimport List from './List.js';\r\n\r\nimport '../css/Result.css'\r\n\r\nclass Result extends Component{\r\n    render(){\r\n        if(this.props.found){\r\n            \r\n            return(\r\n                <div class=\"Result\">\r\n                    <List data={this.props.appdata} searchzip={this.props.searchzip} search={this.props.search}/>\r\n                </div>\r\n            ) \r\n        }\r\n        else{\r\n            return <p>No results found</p>\r\n        }\r\n    }\r\n};\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport '../css/App.css'\r\n\r\nimport Result from './Result.js';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            search: \"\",\r\n            found: false,\r\n            appdata: [],\r\n            searchzip: true,\r\n            inputtext: \"Enter a city name\",\r\n        };\r\n\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.switchSearch=this.switchSearch.bind(this);\r\n    }\r\n\r\n\r\n    async handleSearch(){\r\n        let url = \"\";\r\n        if(this.state.searchzip)\r\n        {\r\n            url = \"http://ctp-zip-api.herokuapp.com/zip/\"+ this.state.search;\r\n        }\r\n        else{\r\n            let search = this.state.search;\r\n            search = search.toUpperCase()\r\n            url = \"http://ctp-zip-api.herokuapp.com/city/\"+ search;\r\n        }\r\n        try{\r\n            let result = await axios.get(url);\r\n            this.setState({appdata: result.data});\r\n            this.setState({found: true})\r\n        }\r\n        catch(error){\r\n            console.log(\"error occured\")\r\n            this.setState({found: false})\r\n        }\r\n    }\r\n\r\n    handleInput(event){\r\n        this.setState({search: event.target.value})\r\n    }\r\n\r\n    switchSearch(){\r\n       this.setState(\r\n            {\r\n               searchzip: !this.state.searchzip,\r\n               found: false,\r\n               search: \"\",\r\n            }\r\n        )\r\n       \r\n    }\r\n\r\n    render() {\r\n        return (      \r\n           <div class =\"App\">\r\n               <header>\r\n                   <div id='head'>\r\n                        {this.state.searchzip? \"Search Zipcode\" : \"Search City\"}\r\n                   </div>\r\n                   <button class='toggle' onClick={() => this.switchSearch()}>{this.state.searchzip ? \"Change to City\" : \"Change to Zipcode\"}</button>\r\n               </header>\r\n               \r\n               <div class='search'>\r\n                    <form>\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder={this.state.searchzip ? \"Enter a zipcode\" : \"Enter a city name\"}\r\n                            id='zip' \r\n                            value={this.state.search} \r\n                            onChange={this.handleInput}\r\n                        />\r\n                        </form>\r\n                    <button class='submit' onClick={this.handleSearch}>Search</button>\r\n               </div>\r\n               <Result id='result' appdata={this.state.appdata} found={this.state.found} searchzip={this.state.searchzip} search={this.state.search}/>\r\n           </div>\r\n               \r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}